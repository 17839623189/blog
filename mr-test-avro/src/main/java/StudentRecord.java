/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A student */
@org.apache.avro.specific.AvroGenerated
public class StudentRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3070626789037653223L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StudentRecord\",\"doc\":\"A student\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"hobby\",\"type\":\"string\"},{\"name\":\"class\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public int age;
  @Deprecated public java.lang.CharSequence hobby;
  @Deprecated public java.lang.CharSequence class$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StudentRecord() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param age The new value for age
   * @param hobby The new value for hobby
   * @param class$ The new value for class
   */
  public StudentRecord(java.lang.CharSequence name, java.lang.Integer age, java.lang.CharSequence hobby, java.lang.CharSequence class$) {
    this.name = name;
    this.age = age;
    this.hobby = hobby;
    this.class$ = class$;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return hobby;
    case 3: return class$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: hobby = (java.lang.CharSequence)value$; break;
    case 3: class$ = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'hobby' field.
   * @return The value of the 'hobby' field.
   */
  public java.lang.CharSequence getHobby() {
    return hobby;
  }

  /**
   * Sets the value of the 'hobby' field.
   * @param value the value to set.
   */
  public void setHobby(java.lang.CharSequence value) {
    this.hobby = value;
  }

  /**
   * Gets the value of the 'class$' field.
   * @return The value of the 'class$' field.
   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Creates a new StudentRecord RecordBuilder.
   * @return A new StudentRecord RecordBuilder
   */
  public static StudentRecord.Builder newBuilder() {
    return new StudentRecord.Builder();
  }

  /**
   * Creates a new StudentRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StudentRecord RecordBuilder
   */
  public static StudentRecord.Builder newBuilder(StudentRecord.Builder other) {
    return new StudentRecord.Builder(other);
  }

  /**
   * Creates a new StudentRecord RecordBuilder by copying an existing StudentRecord instance.
   * @param other The existing instance to copy.
   * @return A new StudentRecord RecordBuilder
   */
  public static StudentRecord.Builder newBuilder(StudentRecord other) {
    return new StudentRecord.Builder(other);
  }

  /**
   * RecordBuilder for StudentRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StudentRecord>
    implements org.apache.avro.data.RecordBuilder<StudentRecord> {

    private java.lang.CharSequence name;
    private int age;
    private java.lang.CharSequence hobby;
    private java.lang.CharSequence class$;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(StudentRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hobby)) {
        this.hobby = data().deepCopy(fields()[2].schema(), other.hobby);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.class$)) {
        this.class$ = data().deepCopy(fields()[3].schema(), other.class$);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StudentRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(StudentRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hobby)) {
        this.hobby = data().deepCopy(fields()[2].schema(), other.hobby);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.class$)) {
        this.class$ = data().deepCopy(fields()[3].schema(), other.class$);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public StudentRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public StudentRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public StudentRecord.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public StudentRecord.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hobby' field.
      * @return The value.
      */
    public java.lang.CharSequence getHobby() {
      return hobby;
    }

    /**
      * Sets the value of the 'hobby' field.
      * @param value The value of 'hobby'.
      * @return This builder.
      */
    public StudentRecord.Builder setHobby(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.hobby = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hobby' field has been set.
      * @return True if the 'hobby' field has been set, false otherwise.
      */
    public boolean hasHobby() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hobby' field.
      * @return This builder.
      */
    public StudentRecord.Builder clearHobby() {
      hobby = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'class$' field.
      * @return The value.
      */
    public java.lang.CharSequence getClass$() {
      return class$;
    }

    /**
      * Sets the value of the 'class$' field.
      * @param value The value of 'class$'.
      * @return This builder.
      */
    public StudentRecord.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.class$ = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'class$' field has been set.
      * @return True if the 'class$' field has been set, false otherwise.
      */
    public boolean hasClass$() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'class$' field.
      * @return This builder.
      */
    public StudentRecord.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public StudentRecord build() {
      try {
        StudentRecord record = new StudentRecord();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.hobby = fieldSetFlags()[2] ? this.hobby : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.class$ = fieldSetFlags()[3] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
